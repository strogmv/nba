// Package statservice provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package statservice

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message    *string `json:"message,omitempty"`
	StatusCode *int    `json:"statusCode,omitempty"`
}

// Player defines model for Player.
type Player struct {
	Name   string `json:"name"`
	TeamId int    `json:"team_id"`
}

// Stat defines model for Stat.
type Stat struct {
	Assists       int     `json:"assists"`
	Blocks        int     `json:"blocks"`
	Fouls         int     `json:"fouls"`
	MinutesPlayed float32 `json:"minutes_played"`
	PlayerId      int     `json:"player_id"`
	Points        int     `json:"points"`
	Rebounds      int     `json:"rebounds"`
	Steals        int     `json:"steals"`
	Turnovers     int     `json:"turnovers"`
}

// Team defines model for Team.
type Team struct {
	Name string `json:"name"`
}

// PostAddPlayerJSONRequestBody defines body for PostAddPlayer for application/json ContentType.
type PostAddPlayerJSONRequestBody = Player

// PostAddStatJSONRequestBody defines body for PostAddStat for application/json ContentType.
type PostAddStatJSONRequestBody = Stat

// PostAddTeamJSONRequestBody defines body for PostAddTeam for application/json ContentType.
type PostAddTeamJSONRequestBody = Team

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new player
	// (POST /add_player)
	PostAddPlayer(ctx echo.Context) error
	// Add a new game stat for a player
	// (POST /add_stat)
	PostAddStat(ctx echo.Context) error
	// Add a new team
	// (POST /add_team)
	PostAddTeam(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAddPlayer converts echo context to params.
func (w *ServerInterfaceWrapper) PostAddPlayer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAddPlayer(ctx)
	return err
}

// PostAddStat converts echo context to params.
func (w *ServerInterfaceWrapper) PostAddStat(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAddStat(ctx)
	return err
}

// PostAddTeam converts echo context to params.
func (w *ServerInterfaceWrapper) PostAddTeam(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAddTeam(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/add_player", wrapper.PostAddPlayer)
	router.POST(baseURL+"/add_stat", wrapper.PostAddStat)
	router.POST(baseURL+"/add_team", wrapper.PostAddTeam)

}

type PostAddPlayerRequestObject struct {
	Body *PostAddPlayerJSONRequestBody
}

type PostAddPlayerResponseObject interface {
	VisitPostAddPlayerResponse(w http.ResponseWriter) error
}

type PostAddPlayer201Response struct {
}

func (response PostAddPlayer201Response) VisitPostAddPlayerResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostAddPlayer400JSONResponse ErrorResponse

func (response PostAddPlayer400JSONResponse) VisitPostAddPlayerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAddPlayer500JSONResponse ErrorResponse

func (response PostAddPlayer500JSONResponse) VisitPostAddPlayerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAddStatRequestObject struct {
	Body *PostAddStatJSONRequestBody
}

type PostAddStatResponseObject interface {
	VisitPostAddStatResponse(w http.ResponseWriter) error
}

type PostAddStat201Response struct {
}

func (response PostAddStat201Response) VisitPostAddStatResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostAddStat400JSONResponse ErrorResponse

func (response PostAddStat400JSONResponse) VisitPostAddStatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAddStat500JSONResponse ErrorResponse

func (response PostAddStat500JSONResponse) VisitPostAddStatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAddTeamRequestObject struct {
	Body *PostAddTeamJSONRequestBody
}

type PostAddTeamResponseObject interface {
	VisitPostAddTeamResponse(w http.ResponseWriter) error
}

type PostAddTeam201Response struct {
}

func (response PostAddTeam201Response) VisitPostAddTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostAddTeam400JSONResponse ErrorResponse

func (response PostAddTeam400JSONResponse) VisitPostAddTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAddTeam500JSONResponse ErrorResponse

func (response PostAddTeam500JSONResponse) VisitPostAddTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a new player
	// (POST /add_player)
	PostAddPlayer(ctx context.Context, request PostAddPlayerRequestObject) (PostAddPlayerResponseObject, error)
	// Add a new game stat for a player
	// (POST /add_stat)
	PostAddStat(ctx context.Context, request PostAddStatRequestObject) (PostAddStatResponseObject, error)
	// Add a new team
	// (POST /add_team)
	PostAddTeam(ctx context.Context, request PostAddTeamRequestObject) (PostAddTeamResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAddPlayer operation middleware
func (sh *strictHandler) PostAddPlayer(ctx echo.Context) error {
	var request PostAddPlayerRequestObject

	var body PostAddPlayerJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAddPlayer(ctx.Request().Context(), request.(PostAddPlayerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAddPlayer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAddPlayerResponseObject); ok {
		return validResponse.VisitPostAddPlayerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAddStat operation middleware
func (sh *strictHandler) PostAddStat(ctx echo.Context) error {
	var request PostAddStatRequestObject

	var body PostAddStatJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAddStat(ctx.Request().Context(), request.(PostAddStatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAddStat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAddStatResponseObject); ok {
		return validResponse.VisitPostAddStatResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAddTeam operation middleware
func (sh *strictHandler) PostAddTeam(ctx echo.Context) error {
	var request PostAddTeamRequestObject

	var body PostAddTeamJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAddTeam(ctx.Request().Context(), request.(PostAddTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAddTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAddTeamResponseObject); ok {
		return validResponse.VisitPostAddTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVT2/bPgz9KoJ+v6PXuE0DFL6lwzB0GIZi3a0oCsZiErW2pJF0tqDIdx8kJ06TGG0P",
	"y0492ZD45z3ykXrSpa+Dd+iEdfGkuZxjDen3E5Gn78jBO8Z4EMgHJLGYrmtkhlm6wN9Qhwp1ocdOYXRT",
	"viwbIjQ607IM8YqFrJvpVaZZQBr+6M2u83l+3hlbJzhD0qtVd+QnD1hK9L+uYIl0iMhBvQfnK16Sd+oL",
	"1Mh9SAShvrdmx+m0FwThz8ZGPsVtm2frfNcD8UZADgECs+W2zl260WG6TE8qXz7ya7AyPfVNtWs27DOr",
	"rWsE+T7Ewu2yHY5ORjEO1RGwnlYeZFsp19STNkRypTfUKtPBW7dHcpj3GRJOfOPMHs9eUxaEPaZnfXbS",
	"kPMLpFdN91q6pdfhf4Yv6zrXIel6tGnC89wHFe+TyA+E+k0ahsc25p56+0R5mCeaWTf1MaZYSRG/XY5V",
	"O0Mq6tSy2JLV+PpKfUgHrG6QFraMIo98rHe60Kcn+UkegfuADoLVhR6mo0wHkHlCPwBjWs7teHpOUxAJ",
	"gljvrowu9LVnGRuznuKWBbJcerOMxqV3gi75QQiVLZPn4IEjis2Cin//E051of8bbDfYYL2+Buvgib5B",
	"LskGaWmsibf1UTIHUQ7RsBKvJqjAmLS0tqUVajDVul2EiedZfho/vZFLQhA0sVLnef7XGO1u4x5iV24B",
	"lTXKutAkgY3+bXZBclApRlogta9AEik3dQ20jI+DMQqUw18qbNqTtZLhzbp8STBppx5HLil0D6vPUKOK",
	"4I6hl5j0XS1vUMus68LUk4ID9chmk76knrRuj6OeFLqHZTw/hnBS3HfhvC4c6RrTmrMubvum8PmD11Cl",
	"Cz0XCcVgUPkSqrlnKS7yi1yv7lZ/AgAA//9OxKoXMAsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
